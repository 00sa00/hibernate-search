[[mapper-orm-bridge-index-field-dsl]]
= Declaring index fields

== Basics

When implementing a <<mapper-orm-bridge-propertybridge,`PropertyBinder`>>
or <<mapper-orm-bridge-typebridge,`TypeBinder`>>,
it is necessary to declare the index fields that the bridge will contribute to.
This declaration is performed using a dedicated DSL.

The entry point to this DSL is the `IndexSchemaElement`.
which represents the part of the document structure that the binder will push data to.

From the `IndexSchemaElement`, it is possible to declare fields.
Below is a simple example using the DSL to declare a single field.

.Declaring a simple index field
====
[source, JAVA, indent=0, subs="+callouts"]
----
include::{sourcedir}/org/hibernate/search/documentation/mapper/orm/bridge/document/model/dsl/simple/ISBNBinder.java[tags=bind]
----
<1> Get the `IndexSchemaElement`, the entry point to the index field declaration DSL.
<2> Declare a field.
<3> Pass the name of the field.
<4> Declare the type of the field.
This is done through a lambda taking advantage of another DSL.
See <<mapper-orm-bridge-index-field-type-dsl>> for more information.
<5> Get a reference to the declared field.
<6> Pass the reference to the bridge for later use.
====

As shown above, the declaration of each field yields a field _reference_.
This reference is to be stored in the bridge,
which will use it at runtime to set the value of this field in a given document,
represented by a `DocumentElement`.

.Using a field reference to write to a document
====
[source, JAVA, indent=0, subs="+callouts"]
----
include::{sourcedir}/org/hibernate/search/documentation/mapper/orm/bridge/document/model/dsl/simple/ISBNBinder.java[tags=write]
----
<1> Add a value to the field for the current document.
====

== Type objects

The lambda syntax to declare the type of each field is convenient,
but sometimes gets in the way,
in particular when multiple fields must be declared with the exact same type.

For that reason, the context object passed to binders exposes a `getIndexFieldTypeFactory()` method.
Using this factory, it is possible to build `IndexFieldType` objects
that can be re-used in multiple field declarations.

.Re-using an index field type in multiple field declarations
====
[source, JAVA, indent=0, subs="+callouts"]
----
include::{sourcedir}/org/hibernate/search/documentation/mapper/orm/bridge/document/model/dsl/simple/SingleValuedNamesBinder.java[tags=bind]
----
<1> Get the type factory.
<2> Define the type.
<3> Get the resulting type.
<4> Pass the type directly instead of using a lambda when defining the field.
====

== Multi-valued fields

Fields are considered single-valued by default:
if you attempt to add multiple values to a single-valued field during indexing,
an exception will be thrown.

In order to add multiple values to a field,
this field must be marked as multi-valued during its declaration:

.Declaring a field as multi-valued
====
[source, JAVA, indent=0, subs="+callouts"]
----
include::{sourcedir}/org/hibernate/search/documentation/mapper/orm/bridge/document/model/dsl/simple/MultiValuedNamesBinder.java[tags=bind]
----
<1> Declare the field as multi-valued.
====

== Object fields

The previous sections only presented flat schemas with atomic fields,
but the index schema can actually be organized in a tree structure,
with two categories of index fields:

* Value fields, often simply called "fields", which hold an atomic value of a specific type:
string, integer, date, ...
* Object fields, which hold a composite value.

Object fields are declared similarly to value fields,
with an additional step to declare each sub-field,
as shown below.

.Declaring an object field
====
[source, JAVA, indent=0, subs="+callouts"]
----
include::{sourcedir}/org/hibernate/search/documentation/mapper/orm/bridge/document/model/dsl/object/InvoiceLineItemsSummaryBinder.java[tags=bind]
----
<1> Declare an object field with `objectField`, passing its name in parameter.
<2> Get a reference to the declared object field
and pass it to the bridge for later use.
<3> Create sub-fields, get references to these fields
and pass them to the bridge for later use.
====

[NOTE]
====
The sub-fields of an object field can include object fields.
====

[NOTE]
====
Just as value fields, object fields are single-valued by default.
Be sure to call `.multiValued()` during the object field definition
if you want to make it multi-valued.
====

Object fields as well as their sub-fields are each assigned a reference,
which will be used by the bridge to write to documents,
as shown in the example below.

.Writing to an object field
====
[source, JAVA, indent=0, subs="+callouts"]
----
include::{sourcedir}/org/hibernate/search/documentation/mapper/orm/bridge/document/model/dsl/object/InvoiceLineItemsSummaryBinder.java[tags=write]
----
<1> Add an object to the `summary` object field for the current document,
and get a reference to to that object.
<2> Add a value to the sub-fields for the object we just added.
Note we're calling `addValue` on the object we just added, not on `target`.
====

== Object field storage

By default, object fields are flattened,
meaning that the tree structure is not preserved.
See <<mapper-orm-indexedembedded-storage-flattened>> for more information.

It is possible to switch to <<mapper-orm-indexedembedded-storage-nested,nested storage>>
by passing an argument to the `objectField` method, as shown below.
Each value of the object field will then transparently be indexed as a separate nested document,
without any change to the `write` method of the bridge.

.Declaring an object field as nested
====
[source, JAVA, indent=0, subs="+callouts"]
----
include::{sourcedir}/org/hibernate/search/documentation/mapper/orm/bridge/document/model/dsl/object/InvoiceLineItemsDetailBinder.java[tags=bind]
----
<1> Declare an object field with `objectField`.
<2> Pass the name of the object field.
<3> Pass the storage type of the object field, here `NESTED`.
<4> Declare the object field as multi-valued.
<5> Get a reference to the declared object field
and pass it to the bridge for later use.
<6> Create sub-fields, get references to these fields
and pass them to the bridge for later use.
====
