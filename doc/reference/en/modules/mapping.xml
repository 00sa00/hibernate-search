<?xml version="1.0" encoding="UTF-8"?>
<!--
  ~ Hibernate, Relational Persistence for Idiomatic Java
  ~
  ~ Copyright (c) 2008, Red Hat Middleware LLC or third-party contributors as
  ~ indicated by the @author tags or express copyright attribution
  ~ statements applied by the authors.  All third-party contributions are
  ~ distributed under license by Red Hat Middleware LLC.
  ~
  ~ This copyrighted material is made available to anyone wishing to use, modify,
  ~ copy, or redistribute it subject to the terms and conditions of the GNU
  ~ Lesser General Public License, as published by the Free Software Foundation.
  ~
  ~ This program is distributed in the hope that it will be useful,
  ~ but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY
  ~ or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU Lesser General Public License
  ~ for more details.
  ~
  ~ You should have received a copy of the GNU Lesser General Public License
  ~ along with this distribution; if not, write to:
  ~ Free Software Foundation, Inc.
  ~ 51 Franklin Street, Fifth Floor
  ~ Boston, MA  02110-1301  USA
  -->
<!DOCTYPE chapter PUBLIC "-//OASIS//DTD DocBook XML V4.5//EN"
"http://www.oasis-open.org/docbook/xml/4.5/docbookx.dtd">
<chapter id="search-mapping" revision="3">
  <!--  $Id$ -->

  <title>Mapping entities to the index structure</title>

  <para>All the metadata information needed to index entities is described
  through some Java annotations. There is no need for xml mapping files (in
  fact there exists currently no xml configuration option) nor a list of
  indexed entities. The list is discovered at startup time scanning the
  Hibernate mapped entities.</para>

  <section id="search-mapping-entity" revision="3">
    <title>Mapping an entity</title>

    <section>
      <title>Basic mapping</title>

      <para>First, we must declare a persistent class as indexable. This is
      done by annotating the class with <literal>@Indexed</literal> (all
      entities not annotated with <literal>@Indexed</literal> will be ignored
      by the indexing process):</para>

      <programlisting>@Entity
<emphasis role="bold">@Indexed(index="indexes/essays")</emphasis>
public class Essay {
    ...
}</programlisting>

      <para>The <literal>index</literal> attribute tells Hibernate what the
      Lucene directory name is (usually a directory on your file system). If
      you wish to define a base directory for all Lucene indexes, you can use
      the <literal>hibernate.search.default.indexBase</literal> property in
      your configuration file. Each entity instance will be represented by a
      Lucene <classname>Document</classname> inside the given index (aka
      Directory).</para>

      <para>For each property (or attribute) of your entity, you have the
      ability to describe how it will be indexed. The default (ie no
      annotation) means that the property is completly ignored by the indexing
      process. <literal>@Field</literal> does declare a property as indexed.
      When indexing an element to a Lucene document you can specify how it is
      indexed:</para>

      <itemizedlist>
        <listitem>
          <para><literal>name</literal> : describe under which name, the
          property should be stored in the Lucene Document. The default value
          is the property name (following the JavaBeans convention)</para>
        </listitem>

        <listitem>
          <para><literal>store</literal> : describe whether or not the
          property is stored in the Lucene index. You can store the value
          <literal>Store.YES</literal> (comsuming more space in the index but
          allowing projection, see <xref linkend="projections" /> for more
          information), store it in a compressed way
          <literal>Store.COMPRESS</literal> (this does consume more CPU), or
          avoid any storage <literal>Store.NO</literal> (this is the default
          value). When a property is stored, you can retrieve it from the
          Lucene Document (note that this is not related to whether the
          element is indexed or not).</para>
        </listitem>

        <listitem>
          <para>index: describe how the element is indexed (ie the process
          used to index the property and the type of information store). The
          different values are <literal>Index.NO</literal> (no indexing, ie
          cannot be found by a query), <literal>Index.TOKENIZED</literal> (use
          an analyzer to process the property),
          <literal>Index.UN_TOKENISED</literal> (no analyzer pre processing),
          <literal>Index.NO_NORM</literal> (do not store the normalization
          data). The default value is <literal>TOKENIZED</literal>.</para>
        </listitem>

        <listitem>
          <para>termVector: describes collections of term-frequency pairs.
          This attribute enables term vectors being stored during indexing so
          they are available within documents. The default value is
          TermVector.NO.</para>

          <para>The different values of this attribute are</para>

          <informaltable align="left" width="">
            <tgroup cols="2">
              <colspec align="center" />

              <thead>
                <row>
                  <entry align="center">Value</entry>

                  <entry align="center">Definition</entry>
                </row>
              </thead>

              <tbody>
                <row>
                  <entry align="left">TermVector.YES</entry>

                  <entry>Store the term vectors of each document. This
                  produces two synchronized arrays, one contains document
                  terms and the other contains the term's frequency.</entry>
                </row>

                <row>
                  <entry align="left">TermVector.NO</entry>

                  <entry>Do not store term vectors.</entry>
                </row>

                <row>
                  <entry align="left">TermVector.WITH_OFFSETS</entry>

                  <entry>Store the term vector and token offset information.
                  This is the same as TermVector.YES plus it contains the
                  starting and ending offset position information for the
                  terms.</entry>
                </row>

                <row>
                  <entry align="left">TermVector.WITH_POSITIONS</entry>

                  <entry>Store the term vector and token position information.
                  This is the same as TermVector.YES plus it contains the
                  ordinal positions of each occurrence of a term in a
                  document.</entry>
                </row>

                <row>
                  <entry
                  align="left">TermVector.WITH_POSITIONS_OFFSETS</entry>

                  <entry>Store the term vector, token position and offset
                  information. This is a combination of the YES, WITH_OFFSETS
                  and WITH_POSITIONS.</entry>
                </row>
              </tbody>
            </tgroup>
          </informaltable>
        </listitem>
      </itemizedlist>

      <para>These attributes are part of the <literal>@Field</literal>
      annotation.</para>

      <para>Whether or not you want to store the data depends on how you wish
      to use the index query result. For a regular Hibernate Search usage,
      storing is not necessary. However you might want to store some fields to
      subsequently project them (see <xref linkend="projections" /> for more
      information).</para>

      <para>Whether or not you want to tokenize a property depends on whether
      you wish to search the element as is, or by the words it contains. It
      make sense to tokenize a text field, but it does not to do it for a date
      field (or an id field). Note that fields used for sorting must not be
      tokenized.</para>

      <para>Finally, the id property of an entity is a special property used
      by Hibernate Search to ensure index unicity of a given entity. By
      design, an id has to be stored and must not be tokenized. To mark a
      property as index id, use the <literal>@DocumentId</literal>
      annotation.</para>

      <programlisting>@Entity
@Indexed(index="indexes/essays")
public class Essay {
    ...

    @Id
    <emphasis role="bold">@DocumentId</emphasis>
    public Long getId() { return id; }

    <emphasis role="bold">@Field(name="Abstract", index=Index.TOKENIZED, store=Store.YES)</emphasis>
    public String getSummary() { return summary; }

    @Lob
    <emphasis role="bold">@Field(index=Index.TOKENIZED)</emphasis>
    public String getText() { return text; }
}</programlisting>

      <para>These annotations define an index with three fields:
      <literal>id</literal> , <literal>Abstract</literal> and
      <literal>text</literal> . Note that by default the field name is
      decapitalized, following the JavaBean specification.</para>

      <note>
        <para>You <emphasis>must</emphasis> specify
        <literal>@DocumentId</literal> on the identifier property of your
        entity class.</para>
      </note>
    </section>

    <section>
      <title>Mapping properties multiple times</title>

      <para>It is sometimes needed to map a property multiple times per index,
      with slightly different indexing strategies. Especially, sorting a query
      by field requires the field to be <literal>UN_TOKENIZED</literal>. If
      one want to search by words in this property and still sort it, one need
      to index it twice, once tokenized, once untokenized. @Fields allows to
      achieve this goal.</para>

      <programlisting>@Entity
@Indexed(index = "Book" )
public class Book {
    @Fields( {
            @Field(index = Index.TOKENIZED),
            @Field(name = "summary_forSort", index = Index.UN_TOKENIZED, store = Store.YES)
            } )
    public String getSummary() {
        return summary;
    }

    ...
}</programlisting>

      <para>The field summary is indexed twice, once as
      <literal>summary</literal> in a tokenized way, and once as
      <literal>summary_forSort</literal> in an untokenized way. @Field
      supports 2 attributes useful when @Fields is used:</para>

      <itemizedlist>
        <listitem>
          <para>analyzer: defines a @Analyzer annotation per field rather than
          per property</para>
        </listitem>

        <listitem>
          <para>bridge: defines a @FieldBridge annotation per field rather
          than per property</para>
        </listitem>
      </itemizedlist>

      <para>See below for more information about analyzers and field
      bridges.</para>
    </section>

    <section id="search-mapping-associated">
      <title>Embedded and associated objects</title>

      <para>Associated objects as well as embedded objects can be indexed as
      part of the root entity index. It is necessary if you expect to search a
      given entity based on properties of the associated object(s). In the
      following example, the use case is to return the places whose city is
      Atlanta (In the Lucene query parser language, it would translate into
      <code>address.city:Atlanta</code>).</para>

      <programlisting>@Entity
@Indexed
public class Place {
    @Id
    @GeneratedValue
    @DocumentId
    private Long id;

    @Field( index = Index.TOKENIZED )
    private String name;

    @OneToOne( cascade = { CascadeType.PERSIST, CascadeType.REMOVE } )
    <emphasis role="bold">@IndexedEmbedded</emphasis>
    private Address address;
    ....
}

@Entity
@Indexed
public class Address {
    @Id
    @GeneratedValue
    @DocumentId
    private Long id;

    @Field(index=Index.TOKENIZED)
    private String street;

    @Field(index=Index.TOKENIZED)
    private String city;

    <emphasis role="bold">@ContainedIn</emphasis>
    @OneToMany(mappedBy="address")
    private Set&lt;Place&gt; places;
    ...
}</programlisting>

      <para>In this example, the place fields will be indexed in the
      <literal>Place</literal> index. The <literal>Place</literal> index
      documents will also contain the fields <literal>address.id</literal>,
      <literal>address.street</literal>, and <literal>address.city</literal>
      which you will be able to query. This is enabled by the
      <literal>@IndexedEmbedded</literal> annotation.</para>

      <para>Be careful. Because the data is denormalized in the Lucene index
      when using the <classname>@IndexedEmbedded</classname> technique,
      Hibernate Search needs to be aware of any change in the Place object and
      any change in the Address object to keep the index up to date. To make
      sure the Place Lucene document is updated when it's Address changes, you
      need to mark the other side of the birirectional relationship with
      <classname>@ContainedIn</classname>.</para>

      <para><literal>@ContainedIn</literal> is only useful on associations
      pointing to entities as opposed to embedded (collection of)
      objects.</para>

      <para>Let's make our example a bit more complex:</para>

      <programlisting>@Entity
@Indexed
public class Place {
    @Id
    @GeneratedValue
    @DocumentId
    private Long id;

    @Field( index = Index.TOKENIZED )
    private String name;

    @OneToOne( cascade = { CascadeType.PERSIST, CascadeType.REMOVE } )
    <emphasis role="bold">@IndexedEmbedded</emphasis>
    private Address address;
    ....
}

@Entity
@Indexed
public class Address {
    @Id
    @GeneratedValue
    @DocumentId
    private Long id;

    @Field(index=Index.TOKENIZED)
    private String street;

    @Field(index=Index.TOKENIZED)
    private String city;

    <emphasis role="bold">@IndexedEmbedded(depth = 1, prefix = "ownedBy_")</emphasis>
    private Owner ownedBy;

    <emphasis role="bold">@ContainedIn</emphasis>
    @OneToMany(mappedBy="address")
    private Set&lt;Place&gt; places;
    ...
}

@Embeddable
public class Owner {
    @Field(index = Index.TOKENIZED)
    private String name;
   ...
}</programlisting>

      <para>Any <literal>@*ToMany, @*ToOne</literal> and
      <literal>@Embedded</literal> attribute can be annotated with
      <literal>@IndexedEmbedded</literal>. The attributes of the associated
      class will then be added to the main entity index. In the previous
      example, the index will contain the following fields</para>

      <itemizedlist>
        <listitem>
          <para>id</para>
        </listitem>

        <listitem>
          <para>name</para>
        </listitem>

        <listitem>
          <para>address.street</para>
        </listitem>

        <listitem>
          <para>address.city</para>
        </listitem>

        <listitem>
          <para>addess.ownedBy_name</para>
        </listitem>
      </itemizedlist>

      <para>The default prefix is <literal>propertyName.</literal>, following
      the traditional object navigation convention. You can override it using
      the <literal>prefix</literal> attribute as it is shown on the
      <literal>ownedBy</literal> property.</para>

      <para><literal>depth</literal> is necessary when the object graph
      contains a cyclic dependency of classes (not instances). For example, if
      <classname>Owner</classname> points to <classname>Place</classname>.
      Hibernate Search will stop including Indexed embedded atttributes after
      reaching the expected depth (or the object graph boundaries are
      reached). A class having a self reference is an example of cyclic
      dependency. In our example, because <literal>depth</literal> is set to
      1, any <literal>@IndexedEmbedded</literal> attribute in Owner (if any)
      will be ignored.</para>

      <para>Such a feature (<literal>@IndexedEmbedded</literal>) is very
      useful to express queries refering to associated objects, such
      as:</para>

      <itemizedlist>
        <listitem>
          <para>Return places where name contains JBoss and where address city
          is Atlanta. In Lucene query this would be</para>

          <programlisting>+name:jboss +address.city:atlanta  </programlisting>
        </listitem>

        <listitem>
          <para>Return places where name contains JBoss and where owner's name
          contain Joe. In Lucene query this would be</para>

          <programlisting>+name:jboss +address.orderBy_name:joe  </programlisting>
        </listitem>
      </itemizedlist>

      <para>In a way it mimics the relational join operation in a more
      efficient way (at the cost of data duplication). Remember that, out of
      the box, Lucene indexes have no notion of association, the join
      operation is simply non-existent. It might help to keep the relational
      model normalzed while benefiting from the full text index speed and
      feature richness.</para>

      <para><note>
          <para>An associated object can itself (but does not have to) be
          <literal>@Indexed</literal></para>
        </note></para>

      <para>When @IndexedEmbedded points to an entity, the association has to
      be directional and the other side has to be annotated
      <literal>@ContainedIn</literal> (as seen in the previous example). If
      not, Hibernate Search has no way to update the root index when the
      associated entity is updated (in our example, a <literal>Place</literal>
      index document has to be updated when the associated
      <classname>Address</classname> instance is updated).</para>

      <para>Sometimes, the object type annotated by
      <classname>@IndexedEmbedded</classname> is not the object type targeted
      by Hibernate and Hibernate Search especially when interfaces are used in
      lieu of their implementation. You can override the object type targeted
      by Hibernate Search using the <methodname>targetElement</methodname>
      parameter.</para>

      <programlisting>@Entity
@Indexed
public class Address {
    @Id
    @GeneratedValue
    @DocumentId
    private Long id;

    @Field(index= Index.TOKENIZED)
    private String street;

    @IndexedEmbedded(depth = 1, prefix = "ownedBy_", <emphasis role="bold">targetElement = Owner.class</emphasis>)
    @Target(Owner.class)
    private Person ownedBy;


    ...
}

@Embeddable
public class Owner implements Person { ... }</programlisting>
    </section>

    <section>
      <title>Boost factor</title>

      <para>Lucene has the notion of <emphasis>boost factor</emphasis>. It's a
      way to give more weigth to a field or to an indexed element over others
      during the indexation process. You can use <literal>@Boost</literal> at
      the @Field, method or class level.</para>

      <programlisting>@Entity
@Indexed(index="indexes/essays")
<emphasis role="bold">@Boost(1.7f)</emphasis>
public class Essay {
    ...

    @Id
    @DocumentId
    public Long getId() { return id; }

    @Field(name="Abstract", index=Index.TOKENIZED, store=Store.YES, boost=<emphasis
          role="bold">@Boost(2f)</emphasis>)
    <emphasis role="bold">@Boost(1.5f)</emphasis>
    public String getSummary() { return summary; }

    @Lob
    @Field(index=Index.TOKENIZED, boost=<emphasis role="bold">@Boost(1.2f)</emphasis>)
    public String getText() { return text; }

    @Field
    public String getISBN() { return isbn; }

}        </programlisting>

      <para>In our example, Essay's probability to reach the top of the search
      list will be multiplied by 1.7. The <methodname>summary</methodname>
      field will be 2.5 (2 * 1.5) more important than the
      <methodname>isbn</methodname> field. The <methodname>text</methodname>
      field will be 1.2 times more important than the
      <methodname>isbn</methodname> field. Note that this explanation in
      strictest terms is actually wrong, but it is simple and close enough to
      reality for all practical purposes. Please check the Lucene
      documentation or the excellent <citetitle>Lucene In Action </citetitle>
      from Otis Gospodnetic and Erik Hatcher.</para>

      <para><methodname>@Field.boost</methodname>,
      <classname>@Boost</classname> on a property and
      <classname>@Boost</classname> on a class are all cumulative.</para>
    </section>

    <section id="analyzer">
      <title>Analyzer</title>

      <para>The default analyzer class used to index tokenized fields is
      configurable through the <literal>hibernate.search.analyzer</literal>
      property. The default value for this property is
      <classname>org.apache.lucene.analysis.standard.StandardAnalyzer</classname>.</para>

      <para>You can also define the analyzer class per entity, property and
      even per @Field (useful when multiple fields are indexed from a single
      property).</para>

      <programlisting>@Entity
@Indexed
@Analyzer(impl = EntityAnalyzer.class)
public class MyEntity {
    @Id
    @GeneratedValue
    @DocumentId
    private Integer id;

    @Field(index = Index.TOKENIZED)
    private String name;

    @Field(index = Index.TOKENIZED)
    @Analyzer(impl = PropertyAnalyzer.class)
    private String summary;

    @Field(index = Index.TOKENIZED, analyzer = @Analyzer(impl = FieldAnalyzer.class)
    private String body;

    ...
}</programlisting>

      <para>In this example, <classname>EntityAnalyzer</classname> is used to
      index all tokenized properties (eg. <literal>name</literal>), except
      <literal>summary</literal> and <literal>body</literal> which are indexed
      with <classname>PropertyAnalyzer</classname> and
      <classname>FieldAnalyzer</classname> respectively.</para>

      <caution>
        <para>Mixing different analyzers in the same entity is most of the
        time a bad practice. It makes query building more complex and results
        less predictable (for the novice), especially if you are using a
        QueryParser (which uses the same analyzer for the whole query). As a
        rule of thumb, for any given field the same analyzer should be used
        for indexing and querying.</para>
      </caution>

      <section>
        <title>Analyzer definitions</title>

        <para>Analyzers can become quite complex to deal with for which reason
        Hibernate Search introduces the notion of analyzer definitions. An
        analyzer definition can be reused by many
        <classname>@Analyzer</classname> declarations. An analyzer definition
        is composed of:</para>

        <itemizedlist>
          <listitem>
            <para>a name: the unique string used to refer to the
            definition</para>
          </listitem>

          <listitem>
            <para>a tokenizer: responsible for tokenizing the input stream
            into individual words</para>
          </listitem>

          <listitem>
            <para>a list of filters: each filter is responsible to remove,
            modify or sometimes even add words into the stream provided by the
            tokenizer</para>
          </listitem>
        </itemizedlist>

        <para>This separation of tasks - a tokenizer followed by a list of
        filters - allows easy reuse of each individual component and let you
        build your customized analyzer in a very flexible way (just like
        lego). Generally speaking the <classname>Tokenizer</classname> starts
        the analysis process by turning the character input into tokens which
        are then further processed by the <classname>TokenFilter</classname>s.
        Hibernate Search supports this infrastructure by utilizing the Solr
        analyzer framework. Make sure to add<filename> solr-core.jar and
        </filename><filename>solr-common.jar</filename> to your classpath to
        use analyzer definitions. In case you also want to utilizing a
        snowball stemmer also include the
        <filename>lucene-snowball.jar.</filename> Your distribution of
        Hibernate Search provides these dependecies in its
        <filename>lib</filename> directory.</para>

        <programlisting>@AnalyzerDef(name="customanalyzer",
        tokenizer = @TokenizerDef(factory = StandardTokenizerFactory.class),
        filters = {
                @TokenFilterDef(factory = ISOLatin1AccentFilterFactory.class),
                @TokenFilterDef(factory = LowerCaseFilterFactory.class),
                @TokenFilterDef(factory = StopFilterFactory.class, params = {
                    @Parameter(name="words", value= "org/hibernate/search/test/analyzer/solr/stoplist.properties" ),
                    @Parameter(name="ignoreCase", value="true")
                })
})
public class Team {
    ...
}</programlisting>

        <para>A tokenizer is defined by its factory which is responsible for
        building the tokenizer and using the optional list of parameters. This
        example use the standard tokenizer. A filter is defined by its factory
        which is responsible for creating the filter instance using the
        opetional paramenters. In our example, the StopFilter filter is built
        reading the dedicated words property file and is expected to ignore
        case. The list of parameters is dependent on the tokenizer or filter
        factory.</para>

        <warning>
          <para>Filters are applied in the order they are defined in the
          <classname>@AnalyzerDef</classname> annotation. Make sure to think
          twice about this order.</para>
        </warning>

        <para>Once defined, an analyzer definition can be reused by an
        <classname>@Analyzer</classname> declaration using the definition name
        rather than declaring an implementation class.</para>

        <programlisting>@Entity
@Indexed
@AnalyzerDef(name="customanalyzer", ... )
public class Team {
    @Id
    @DocumentId
    @GeneratedValue
    private Integer id;

    @Field
    private String name;

    @Field
    private String location;

    @Field <emphasis role="bold">@Analyzer(definition = "customanalyzer")</emphasis>
    private String description;
}</programlisting>

        <para>Analyzer instances declared by
        <classname>@AnalyzerDef</classname> are available by their name in the
        <classname>SearchFactory</classname>.</para>

        <programlisting>Analyzer analyzer = fullTextSession.getSearchFactory().getAnalyzer("customanalyzer");</programlisting>

        <para>This is quite useful wen building queries. Fields in queries
        should be analyzed with the same analyzer used to index the field so
        that they speak a common "language": the same tokens are reused
        between the query and the indexing process. This rule has some
        exceptions but is true most of the time, respect it unless you know
        what you are doing.</para>
      </section>

      <section>
        <title>Available analyzers</title>

        <para>Solr and Lucene come with a lot of useful default tokenizers and
        filters. You can find a complete list of tokenizer factories and
        filter factories at <ulink
        url="http://wiki.apache.org/solr/AnalyzersTokenizersTokenFilters">http://wiki.apache.org/solr/AnalyzersTokenizersTokenFilters</ulink>.
        Let check a few of them.</para>

        <table>
          <title>Some of the tokenizers avalable</title>

          <tgroup cols="3">
            <thead>
              <row>
                <entry align="center">Factory</entry>

                <entry align="center">Description</entry>

                <entry align="center">parameters</entry>
              </row>
            </thead>

            <tbody>
              <row>
                <entry>StandardTokenizerFactory</entry>

                <entry>Use the Lucene StandardTokenizer</entry>

                <entry>none</entry>
              </row>

              <row>
                <entry>HTMLStripStandardTokenizerFactory</entry>

                <entry>Remove HTML tags, keep the text and pass it to a
                StandardTokenizer</entry>

                <entry>none</entry>
              </row>
            </tbody>
          </tgroup>
        </table>

        <table>
          <title>Some of the filters avalable</title>

          <tgroup cols="3">
            <thead>
              <row>
                <entry align="center">Factory</entry>

                <entry align="center">Description</entry>

                <entry align="center">parameters</entry>
              </row>
            </thead>

            <tbody>
              <row>
                <entry>StandardFilterFactory</entry>

                <entry>Remove dots from acronyms and 's from words</entry>

                <entry>none</entry>
              </row>

              <row>
                <entry>LowerCaseFilterFactory</entry>

                <entry>Lowercase words</entry>

                <entry>none</entry>
              </row>

              <row>
                <entry>StopFilterFactory</entry>

                <entry>remove words (tokens) matching a list of stop
                words</entry>

                <entry><para><literal>words</literal>: points to a resource
                file containing the stop words</para><para>ignoreCase: true if
                <literal>case</literal> should be ignore when comparing stop
                words, <literal>false</literal> otherwise </para></entry>
              </row>

              <row>
                <entry>SnowballPorterFilterFactory</entry>

                <entry>Reduces a word to it's root in a given language. (eg.
                protect, protects, protection share the same root). Using such
                a filter allows searches matching related words.</entry>

                <entry><para><literal>language</literal>: Danish, Dutch,
                English, Finnish, French, German, Italian, Norwegian,
                Portuguese, Russian, Spanish, Swedish</para>and a few
                more</entry>
              </row>

              <row>
                <entry>ISOLatin1AccentFilterFactory</entry>

                <entry>remove accents for languages like French</entry>

                <entry>none</entry>
              </row>
            </tbody>
          </tgroup>
        </table>

        <para>Don't hesitate to check all the implementations of
        <classname>org.apache.solr.analysis.TokenizerFactory</classname> and
        <classname>org.apache.solr.analysis.TokenFilterFactory</classname> in
        your IDE to see the implementations available.</para>
      </section>

      <section id="analyzer-retrievinganalyzer">
        <title>Retrieving an analyzer</title>

        <para>During indexing time, Hibernate Search is using analyzers under
        the hood for you. In some situations, retrieving analyzers can be
        handy. If your domain model makes use of multiple analyzers (maybe to
        benefit from stemming, use phonetic approximation and so on), you need
        to make sure to use the same analyzers when you build your
        query.</para>

        <note>
          <para>This rule can be broken but you need a good reason for it. If
          you are unsure, use the same analyzers.</para>
        </note>

        <para>You can retrieve the scoped analyzer for a given entity used at
        indexing time by Hibernate Search. A scoped analyzer is an analyzer
        which applies the right analyzers depending on the field indexed:
        multiple analyzers can be defined on a given entity each one working
        on an individual field, a scoped analyzer unify all these analyzers
        into a context-aware analyzer. While the theory seems a bit complex,
        using the right analyzer in a query is very easy.</para>

        <example>
          <title>Using the scoped analyzer when building a full-text
          query</title>

          <programlisting>org.apache.lucene.queryParser.QueryParser parser = new QueryParser(
    "title", 
    fullTextSession.getSearchFactory().getAnalyzer( Song.class )
);

org.apache.lucene.search.Query luceneQuery = parser.parse( "title:sky Or title_stemmed:diamond" );

org.hibernate.Query fullTextQuery = fullTextSession.createFullTextQuery( luceneQuery, Song.class );

List result = fullTextQuery.list(); //return a list of managed objects    </programlisting>
        </example>

        <para>In the example above, the song title is indexed in two fields:
        the standard analyzer is used in the field <literal>title</literal>
        and a stemming analyzer is used in the field
        <literal>title_stemmed</literal>. By using the analyzer provided by
        the search factory, the query uses the appropriate analyzer depending
        on the field targeted.</para>

        <note>
          <para>This is true if you use the query parser which takes the
          analyzer into consideration. If you do not use the Lucene query
          parser, make sure to use the scoped analyzer and tokenize the query
          accordingly. TODO: show an example</para>
        </note>

        <para>If your query targets more that one query and you wish to use
        your standard analyzer, make sure to describe it using an analyzer
        definition. You can retrieve analyzers by their definition name using
        <code>searchFactory.getAnalyzer(String)</code>.</para>
      </section>
    </section>
  </section>

  <section id="search-mapping-bridge">
    <title>Property/Field Bridge</title>

    <para>In Lucene all index fields have to be represented as Strings. For
    this reason all entity properties annotated with <literal>@Field</literal>
    have to be indexed in a String form. For most of your properties,
    Hibernate Search does the translation job for you thanks to a built-in set
    of bridges. In some cases, though you need a more fine grain control over
    the translation process.</para>

    <section>
      <title>Built-in bridges</title>

      <para><literal>Hibernate Search</literal> comes bundled with a set of
      built-in bridges between a Java property type and its full text
      representation.</para>

      <variablelist>
        <varlistentry>
          <term>null</term>

          <listitem>
            <para>null elements are not indexed. Lucene does not support null
            elements and this does not make much sense either.</para>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term>java.lang.String</term>

          <listitem>
            <para>String are indexed as is</para>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term>short, Short, integer, Integer, long, Long, float, Float,
          double, Double, BigInteger, BigDecimal</term>

          <listitem>
            <para>Numbers are converted in their String representation. Note
            that numbers cannot be compared by Lucene (ie used in ranged
            queries) out of the box: they have to be padded <footnote>
                <para>Using a Range query is debatable and has drawbacks, an
                alternative approach is to use a Filter query which will
                filter the result query to the appropriate range.</para>

                <para>Hibernate Search will support a padding mechanism</para>
              </footnote></para>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term>java.util.Date</term>

          <listitem>
            <para>Dates are stored as yyyyMMddHHmmssSSS in GMT time
            (200611072203012 for Nov 7th of 2006 4:03PM and 12ms EST). You
            shouldn't really bother with the internal format. What is
            important is that when using a DateRange Query, you should know
            that the dates have to be expressed in GMT time.</para>

            <para>Usually, storing the date up to the milisecond is not
            necessary. <literal>@DateBridge</literal> defines the appropriate
            resolution you are willing to store in the index ( <literal>
            <literal>@DateBridge(resolution=Resolution.DAY)</literal>
            </literal> ). The date pattern will then be truncated
            accordingly.</para>

            <programlisting>@Entity 
@Indexed
public class Meeting {
    @Field(index=Index.UN_TOKENIZED)
    <emphasis role="bold">@DateBridge(resolution=Resolution.MINUTE)</emphasis>
    private Date date;
    ...                 </programlisting>

            <warning>
              <para>A Date whose resolution is lower than
              <literal>MILLISECOND</literal> cannot be a
              <literal>@DocumentId</literal></para>
            </warning>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term>java.net.URI, java.net.URL</term>

          <listitem>
            <para>URI and URL are converted to their string
            representation</para>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term>java.lang.Class</term>

          <listitem>
            <para>Class are converted to their filly qualified class name. The
            thread context classloader is used when the class is
            rehydrated</para>
          </listitem>
        </varlistentry>
      </variablelist>
    </section>

    <section>
      <title>Custom Bridge</title>

      <para>Sometimes, the built-in bridges of Hibernate Search do not cover
      some of your property types, or the String representation used by the
      bridge does not meet your requirements. The following paragraphs
      describe several solutions to this problem.</para>

      <section>
        <title>StringBridge</title>

        <para>The simplest custom solution is to give Hibernate Search an
        implementation of your expected <emphasis>object to String</emphasis>
        bridge. To do so you need to implements the
        <literal>org.hibernate.search.bridge.StringBridge</literal>
        interface.</para>
        <para>All implementations have to be thread-safe as they
        are used concurrently.</para>

        <programlisting>/**
 * Padding Integer bridge.
 * All numbers will be padded with 0 to match 5 digits
 *
 * @author Emmanuel Bernard
 */
public class PaddedIntegerBridge implements <emphasis role="bold">StringBridge</emphasis> {

    private int PADDING = 5;

    <emphasis role="bold">public String objectToString(Object object)</emphasis> {
        String rawInteger = ( (Integer) object ).toString();
        if (rawInteger.length() &gt; PADDING) 
            throw new IllegalArgumentException( "Try to pad on a number too big" );
        StringBuilder paddedInteger = new StringBuilder( );
        for ( int padIndex = rawInteger.length() ; padIndex &lt; PADDING ; padIndex++ ) {
            paddedInteger.append('0');
        }
        return paddedInteger.append( rawInteger ).toString();
    }
}                </programlisting>

        <para>Then any property or field can use this bridge thanks to the
        <literal>@FieldBridge</literal> annotation</para>

        <programlisting><emphasis role="bold">@FieldBridge(impl = PaddedIntegerBridge.class)</emphasis>
private Integer length;                </programlisting>

        <para>Parameters can be passed to the Bridge implementation making it
        more flexible. The Bridge implementation implements a
        <classname>ParameterizedBridge</classname> interface, and the
        parameters are passed through the <literal>@FieldBridge</literal>
        annotation.</para>

        <programlisting>public class PaddedIntegerBridge implements StringBridge, <emphasis
            role="bold">ParameterizedBridge</emphasis> {

    public static String PADDING_PROPERTY = "padding";
    private int padding = 5; //default

    <emphasis role="bold">public void setParameterValues(Map parameters)</emphasis> {
        Object padding = parameters.get( PADDING_PROPERTY );
        if (padding != null) this.padding = (Integer) padding;
    }

    public String objectToString(Object object) {
        String rawInteger = ( (Integer) object ).toString();
        if (rawInteger.length() &gt; padding) 
            throw new IllegalArgumentException( "Try to pad on a number too big" );
        StringBuilder paddedInteger = new StringBuilder( );
        for ( int padIndex = rawInteger.length() ; padIndex &lt; padding ; padIndex++ ) {
            paddedInteger.append('0');
        }
        return paddedInteger.append( rawInteger ).toString();
    }
}


//property
@FieldBridge(impl = PaddedIntegerBridge.class,
             <emphasis role="bold">params = @Parameter(name="padding", value="10")</emphasis>
            )
private Integer length;                </programlisting>

        <para>The <classname>ParameterizedBridge</classname> interface can be
        implemented by <classname>StringBridge</classname> ,
        <classname>TwoWayStringBridge</classname> ,
        <classname>FieldBridge</classname> implementations (see
        bellow).</para>
        <para>All implementations have to be thread-safe, but the parameters
        are set during initialization and no special care is required at
        this stage.</para>

        <para>If you expect to use your bridge implementation on for an id
        property (ie annotated with <literal>@DocumentId</literal> ), you need
        to use a slightly extended version of <literal>StringBridge</literal>
        named <classname>TwoWayStringBridge</classname> . <literal>Hibernate
        Search </literal> needs to read the string representation of the
        identifier and generate the object out of it. There is not difference
        in the way the <literal>@FieldBridge</literal> annotation is
        used.</para>

        <programlisting>public class PaddedIntegerBridge implements TwoWayStringBridge, ParameterizedBridge {

    public static String PADDING_PROPERTY = "padding";
    private int padding = 5; //default

    public void setParameterValues(Map parameters) {
        Object padding = parameters.get( PADDING_PROPERTY );
        if (padding != null) this.padding = (Integer) padding;
    }

    public String objectToString(Object object) {
        String rawInteger = ( (Integer) object ).toString();
        if (rawInteger.length() &gt; padding) 
            throw new IllegalArgumentException( "Try to pad on a number too big" );
        StringBuilder paddedInteger = new StringBuilder( );
        for ( int padIndex = rawInteger.length() ; padIndex &lt; padding ; padIndex++ ) {
            paddedInteger.append('0');
        }
        return paddedInteger.append( rawInteger ).toString();
    }

    <emphasis role="bold">public Object stringToObject(String stringValue)</emphasis> {
        return new Integer(stringValue);
    }
}


//id property
@DocumentId
@FieldBridge(impl = PaddedIntegerBridge.class,
             params = @Parameter(name="padding", value="10") 
private Integer id;
                </programlisting>

        <para>It is critically important for the two-way process to be
        idempotent (ie object = stringToObject( objectToString( object ) )
        ).</para>
      </section>

      <section>
        <title>FieldBridge</title>

        <para>Some usecase requires more than a simple object to string
        translation when mapping a property to a Lucene index. To give you
        most of the flexibility you can also implement a bridge as a
        <classname>FieldBridge</classname> . This interface give you a
        property value and let you map it the way you want in your Lucene
        <classname>Document</classname> .This interface is very similar in its
        concept to the <productname>Hibernate</productname>
        <classname>UserType</classname> .</para>

        <para>You can for example store a given property in two different
        document fields</para>

        <programlisting>/**
 * Store the date in 3 different fields - year, month, day - to ease Range Query per
 * year, month or day (eg get all the elements of December for the last 5 years).
 * 
 * @author Emmanuel Bernard
 */
public class DateSplitBridge implements FieldBridge {
    private final static TimeZone GMT = TimeZone.getTimeZone("GMT");

    <emphasis role="bold">public void set(String name, Object value, Document document, LuceneOptions luceneOptions)</emphasis> {
        Date date = (Date) value;
        Calendar cal = GregorianCalendar.getInstance(GMT);
        cal.setTime(date);
        int year = cal.get(Calendar.YEAR);
        int month = cal.get(Calendar.MONTH) + 1;
        int day = cal.get(Calendar.DAY_OF_MONTH);
  
        // set year
        Field field = new Field(name + ".year", String.valueOf(year),
            luceneOptions.getStore(), luceneOptions.getIndex(),
            luceneOptions.getTermVector());
        field.setBoost(luceneOptions.getBoost());
        document.add(field);
  
        // set month and pad it if needed
        field = new Field(name + ".month", month &lt; 10 ? "0" : ""
            + String.valueOf(month), luceneOptions.getStore(),
            luceneOptions.getIndex(), luceneOptions.getTermVector());
        field.setBoost(luceneOptions.getBoost());
        document.add(field);
  
        // set day and pad it if needed
        field = new Field(name + ".day", day &lt; 10 ? "0" : ""
            + String.valueOf(day), luceneOptions.getStore(),
            luceneOptions.getIndex(), luceneOptions.getTermVector());
        field.setBoost(luceneOptions.getBoost());
        document.add(field);
    }
}

//property
<emphasis role="bold">@FieldBridge(impl = DateSplitBridge.class)</emphasis>
private Date date;                </programlisting>
      </section>

      <section>
        <title>@ClassBridge</title>

        <para>It is sometimes useful to combine more than one property of a
        given entity and index this combination in a specific way into the
        Lucene index. The <classname>@ClassBridge</classname> and
        <classname>@ClassBridge</classname> annotations can be defined at the
        class level (as opposed to the property level). In this case the
        custom field bridge implementation receives the entity instance as the
        value parameter instead of a particular property. Though not shown in
        this example, <classname>@ClassBridge</classname> supports the
        <methodname>termVector</methodname> attribute discussed
        previously.</para>

        <programlisting>@Entity
@Indexed
<emphasis role="bold">@ClassBridge</emphasis>(name="branchnetwork",
             index=Index.TOKENIZED,
             store=Store.YES,
             impl = <emphasis role="bold">CatFieldsClassBridge.class</emphasis>,
             params = @Parameter( name="sepChar", value=" " ) )
public class Department {
    private int id;
    private String network;
    private String branchHead;
    private String branch;
    private Integer maxEmployees;
    ...
}


public class CatFieldsClassBridge implements FieldBridge, ParameterizedBridge {
    private String sepChar;

    public void setParameterValues(Map parameters) {
        this.sepChar = (String) parameters.get( "sepChar" );
    }

    <emphasis role="bold">public void set(String name, Object value, Document document, LuceneOptions luceneOptions)</emphasis> {
        // In this particular class the name of the new field was passed
        // from the name field of the ClassBridge Annotation. This is not
        // a requirement. It just works that way in this instance. The
        // actual name could be supplied by hard coding it below.
        Department dep = (Department) value;
        String fieldValue1 = dep.getBranch();
        if ( fieldValue1 == null ) {
            fieldValue1 = "";
        }
        String fieldValue2 = dep.getNetwork();
        if ( fieldValue2 == null ) {
            fieldValue2 = "";
        }
        String fieldValue = fieldValue1 + sepChar + fieldValue2;
        Field field = new Field( name, fieldValue, luceneOptions.getStore(), luceneOptions.getIndex(), luceneOptions.getTermVector() );
        field.setBoost( luceneOptions.getBoost() );
        document.add( field );
   }
}</programlisting>

        <para>In this example, the particular
        <classname>CatFieldsClassBridge</classname> is applied to the
        <literal>department</literal> instance, the field bridge then
        concatenate both branch and network and index the
        concatenation.</para>
      </section>
    </section>
  </section>

  <section id="provided-id">
    <title>Providing your own id</title>

    <warning>
      <para>This part of the documentation is a work in progress.</para>
    </warning>

    <para>You can provide your own id for Hibernate Search if you are
    extending the internals. You will have to generate a unique value so it
    can be given to Lucene to be indexed. This will have to be given to
    Hibernate Search when you create an org.hibernate.search.Work object - the
    document id is required in the constructor.</para>

    <section id="ProvidedId">
      <title>The @ProvidedId annotation</title>

      <para>Unlike conventional Hibernate Search API and @DocumentId, this
      annotation is used on the class and not a field. You also can provide
      your own bridge implementation when you put in this annotation by
      calling the bridge() which is on @ProvidedId. Also, if you annotate a
      class with @ProvidedId, your subclasses will also get the annotation -
      but it is not done by using the java.lang.annotations.@Inherited. Be
      sure however, to <emphasis>not</emphasis> use this annotation with
      @DocumentId as your system will break.</para>

      <programlisting>
				
				@ProvidedId (bridge = org.my.own.package.MyCustomBridge)
				@Indexed
				public class MyClass{
				
				@Field
				String MyString;
				
				...
				
				}
				
				
			</programlisting>
    </section>
  </section>
</chapter>
