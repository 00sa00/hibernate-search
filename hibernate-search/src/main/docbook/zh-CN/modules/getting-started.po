# Chinese translations for PACKAGE package.
# Automatically generated, 2009.
#
msgid ""
msgstr ""
"Project-Id-Version: PACKAGE VERSION\n"
"Report-Msgid-Bugs-To: http://bugs.kde.org\n"
"POT-Creation-Date: 2009-05-26 15:46+0000\n"
"PO-Revision-Date: 2009-05-26 15:46+0000\n"
"Last-Translator: Automatically generated\n"
"Language-Team: none\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#. Tag: title
#: getting-started.xml:30
#, no-c-format
msgid "Getting started"
msgstr ""

#. Tag: para
#: getting-started.xml:32
#, no-c-format
msgid ""
"Welcome to Hibernate Search! The following chapter will guide you through "
"the initial steps required to integrate Hibernate Search into an existing "
"Hibernate enabled application. In case you are a Hibernate new timer we "
"recommend you start <ulink url=\"http://hibernate.org/152.html\">here</"
"ulink>."
msgstr ""

#. Tag: title
#: getting-started.xml:39
#, no-c-format
msgid "System Requirements"
msgstr ""

#. Tag: title
#: getting-started.xml:42
#, no-c-format
msgid "System requirements"
msgstr ""

#. Tag: entry
#: getting-started.xml:47
#, no-c-format
msgid "Java Runtime"
msgstr ""

#. Tag: entry
#: getting-started.xml:49
#, no-c-format
msgid ""
"A JDK or JRE version <emphasis>5</emphasis> or greater. You can download a "
"Java Runtime for Windows/Linux/Solaris <ulink url=\"http://java.sun.com/"
"javase/downloads/\">here</ulink>."
msgstr ""

#. Tag: entry
#: getting-started.xml:55
#, no-c-format
msgid "Hibernate Search"
msgstr ""

#. Tag: entry
#: getting-started.xml:57
#, no-c-format
msgid ""
"<literal>hibernate-search.jar</literal> and all runtime dependencies from "
"the <literal>lib</literal> directory of the Hibernate Search distribution. "
"Please refer to <filename>README.txt </filename>in the lib directory to "
"understand which dependencies are required."
msgstr ""

#. Tag: entry
#: getting-started.xml:65
#, no-c-format
msgid "Hibernate Core"
msgstr ""

#. Tag: entry
#: getting-started.xml:67
#, no-c-format
msgid ""
"This instructions have been tested against Hibernate 3.3.x. You will need "
"<literal>hibernate-core.jar</literal> and its transitive dependencies from "
"the <literal>lib</literal> directory of the distribution. Refer to "
"<literal>README.txt</literal> in the <literal>lib</literal> directory of the "
"distribution to determine the minimum runtime requirements."
msgstr ""

#. Tag: entry
#: getting-started.xml:76
#, no-c-format
msgid "Hibernate Annotations"
msgstr ""

#. Tag: entry
#: getting-started.xml:78
#, no-c-format
msgid ""
"Even though Hibernate Search can be used without Hibernate Annotations the "
"following instructions will use them for basic entity configuration "
"(<emphasis>@Entity, @Id, @OneToMany,...</emphasis>). This part of the "
"configuration could also be expressed in xml or code. However, Hibernate "
"Search itself has its own set of annotations (<emphasis>@Indexed, "
"@DocumentId, @Field,...</emphasis>) for which there exists so far no "
"alternative configuration. The tutorial is tested against version 3.4.x of "
"Hibernate Annotations."
msgstr ""

#. Tag: para
#: getting-started.xml:92
#, no-c-format
msgid ""
"You can download all dependencies from the Hibernate <ulink url=\"http://www."
"hibernate.org/6.html\">download site</ulink>. You can also verify the "
"dependency versions against the <ulink url=\"http://www.hibernate.org/6."
"html#A3\">Hibernate Compatibility Matrix</ulink>."
msgstr ""

#. Tag: title
#: getting-started.xml:100
#, no-c-format
msgid "Using Maven"
msgstr ""

#. Tag: para
#: getting-started.xml:102
#, no-c-format
msgid ""
"Instead of managing all dependencies manually, maven users have the "
"possibility to use the <ulink url=\"http://repository.jboss.com/maven2"
"\">JBoss maven repository</ulink>. Just add the JBoss repository url to the "
"<emphasis>repositories</emphasis> section of your <filename>pom.xml</"
"filename> or <filename>settings.xml</filename>:"
msgstr ""

#. Tag: title
#: getting-started.xml:110
#, no-c-format
msgid "Adding the JBoss maven repository to <filename>settings.xml</filename>"
msgstr ""

#. Tag: programlisting
#: getting-started.xml:113
#, no-c-format
msgid ""
"&lt;repository&gt;\n"
"  &lt;id&gt;repository.jboss.org&lt;/id&gt;\n"
"  &lt;name&gt;JBoss Maven Repository&lt;/name&gt;\n"
"  &lt;url&gt;http://repository.jboss.org/maven2&lt;/url&gt;\n"
"  &lt;layout&gt;default&lt;/layout&gt;\n"
"&lt;/repository&gt;"
msgstr ""

#. Tag: para
#: getting-started.xml:116
#, no-c-format
msgid "Then add the following dependencies to your pom.xml:"
msgstr ""

#. Tag: title
#: getting-started.xml:119
#, no-c-format
msgid "Maven dependencies for Hibernate Search"
msgstr ""

#. Tag: programlisting
#: getting-started.xml:121
#, no-c-format
msgid ""
"&lt;dependency&gt;\n"
"   &lt;groupId&gt;org.hibernate&lt;/groupId&gt;\n"
"   &lt;artifactId&gt;hibernate-search&lt;/artifactId&gt;\n"
"   &lt;version&gt;3.1.0.GA&lt;/version&gt;\n"
"&lt;/dependency&gt;\n"
"&lt;dependency&gt;\n"
"   &lt;groupId&gt;org.hibernate&lt;/groupId&gt;\n"
"   &lt;artifactId&gt;hibernate-annotations&lt;/artifactId&gt;\n"
"   &lt;version&gt;3.4.0.GA&lt;/version&gt;\n"
"&lt;/dependency&gt;\n"
"&lt;dependency&gt;\n"
"   &lt;groupId&gt;org.hibernate&lt;/groupId&gt;\n"
"   &lt;artifactId&gt;hibernate-entitymanager&lt;/artifactId&gt;\n"
"   &lt;version&gt;3.4.0.GA&lt;/version&gt;\n"
"&lt;/dependency&gt;\n"
"&lt;dependency&gt;\n"
"   &lt;groupId&gt;org.apache.solr&lt;/groupId&gt;\n"
"   &lt;artifactId&gt;solr-common&lt;/artifactId&gt;\n"
"   &lt;version&gt;1.3.0&lt;/version&gt;\n"
"&lt;/dependency&gt;\n"
"&lt;dependency&gt;\n"
"   &lt;groupId&gt;org.apache.solr&lt;/groupId&gt;\n"
"   &lt;artifactId&gt;solr-core&lt;/artifactId&gt;\n"
"   &lt;version&gt;1.3.0&lt;/version&gt;\n"
"&lt;/dependency&gt;\n"
"&lt;dependency&gt;\n"
"   &lt;groupId&gt;org.apache.lucene&lt;/groupId&gt;\n"
"   &lt;artifactId&gt;lucene-snowball&lt;/artifactId&gt;\n"
"   &lt;version&gt;2.4.0&lt;/version&gt;\n"
"&lt;/dependency&gt;"
msgstr ""

#. Tag: para
#: getting-started.xml:124
#, no-c-format
msgid ""
"Not all dependencies are required. Only the <emphasis>hibernate-search</"
"emphasis> dependency is mandatory. This dependency, together with its "
"required transitive dependencies, contain all required classes needed to use "
"Hibernate Search. <emphasis>hibernate-annotations</emphasis> is only needed "
"if you want to use annotations to configure your domain model as we do in "
"this tutorial. However, even if you choose not to use Hibernate Annotations "
"you still have to use the Hibernate Search specific annotations, which are "
"bundled with the hibernate-search jar file, to configure your Lucene index. "
"Currently there is no XML configuration available for Hibernate Search. "
"<emphasis>hibernate-entitymanager</emphasis> is required if you want to use "
"Hibernate Search in conjunction with JPA. The Solr dependencies are needed "
"if you want to utilize Solr's analyzer framework. More about this later. And "
"finally, the <literal>lucene-snowball</literal> dependency is needed if you "
"want to use Lucene's snowball stemmer."
msgstr ""

#. Tag: title
#: getting-started.xml:142
#, no-c-format
msgid "Configuration"
msgstr ""

#. Tag: para
#: getting-started.xml:144
#, no-c-format
msgid ""
"Once you have downloaded and added all required dependencies to your "
"application you have to add a couple of properties to your hibernate "
"configuration file. If you are using Hibernate directly this can be done in "
"<literal>hibernate.properties</literal> or <literal>hibernate.cfg.xml</"
"literal>. If you are using Hibernate via JPA you can also add the properties "
"to <literal>persistence.xml</literal>. The good news is that for standard "
"use most properties offer a sensible default. An example "
"<filename>persistence.xml</filename> configuration could look like this:"
msgstr ""

#. Tag: title
#: getting-started.xml:155
#, no-c-format
msgid ""
"Basic configuration options to be added to <literal><filename>hibernate."
"properties</filename></literal>, <literal><filename>hibernate.cfg.xml</"
"filename></literal> or <filename>persistence.xml</filename>"
msgstr ""

#. Tag: programlisting
#: getting-started.xml:160
#, no-c-format
msgid ""
"...\n"
"&lt;property name=\"hibernate.search.default.directory_provider\" \n"
"   value=\"org.hibernate.search.store.FSDirectoryProvider\"/&gt; \n"
"\n"
"&lt;property name=\"hibernate.search.default.indexBase\" value=\"/var/lucene/"
"indexes\"/&gt; \n"
"..."
msgstr ""

#. Tag: para
#: getting-started.xml:163
#, no-c-format
msgid ""
"First you have to tell Hibernate Search which <classname>DirectoryProvider</"
"classname> to use. This can be achieved by setting the <literal>hibernate."
"search.default.directory_provider</literal> property. Apache Lucene has the "
"notion of a <literal>Directory</literal> to store the index files. Hibernate "
"Search handles the initialization and configuration of a Lucene "
"<literal>Directory</literal> instance via a <literal>DirectoryProvider</"
"literal>. In this tutorial we will use a subclass of "
"<literal>DirectoryProvider</literal> called <classname>FSDirectoryProvider</"
"classname>. This will give us the ability to physically inspect the Lucene "
"indexes created by Hibernate Search (eg via <ulink url=\"http://www.getopt."
"org/luke/\">Luke</ulink>). Once you have a working configuration you can "
"start experimenting with other directory providers (see <xref linkend="
"\"search-configuration-directory\"/>). Next to the directory provider you "
"also have to specify the default root directory for all indexes via "
"<literal>hibernate.search.default.indexBase</literal>."
msgstr ""

#. Tag: para
#: getting-started.xml:180
#, no-c-format
msgid ""
"Lets assume that your application contains the Hibernate managed classes "
"<classname>example.Book</classname> and <classname>example.Author</"
"classname> and you want to add free text search capabilities to your "
"application in order to search the books contained in your database."
msgstr ""

#. Tag: title
#: getting-started.xml:187
#, no-c-format
msgid ""
"Example entities Book and Author before adding Hibernate Search specific "
"annotations"
msgstr ""

#. Tag: programlisting
#: getting-started.xml:190
#, no-c-format
msgid ""
"package example;\n"
"...\n"
"@Entity\n"
"public class Book {\n"
"\n"
"  @Id\n"
"  @GeneratedValue\n"
"  private Integer id; \n"
"\n"
"  private String title;  \n"
"\n"
"  private String subtitle; \n"
"\n"
"  @ManyToMany \n"
"  private Set&lt;Author&gt; authors = new HashSet&lt;Author&gt;();\n"
"\n"
"  private Date publicationDate;\n"
"  \n"
"  public Book() {\n"
"  } \n"
"  \n"
"  // standard getters/setters follow here\n"
"  ...\n"
"}"
msgstr ""

#. Tag: programlisting
#: getting-started.xml:192
#, no-c-format
msgid ""
"package example;\n"
"...\n"
"@Entity\n"
"public class Author {\n"
"\n"
"  @Id\n"
"  @GeneratedValue\n"
"  private Integer id;\n"
"\n"
"  private String name;\n"
"\n"
"  public Author() {\n"
"  } \n"
" \n"
"  // standard getters/setters follow here\n"
"  ...\n"
"}"
msgstr ""

#. Tag: para
#: getting-started.xml:195
#, no-c-format
msgid ""
"To achieve this you have to add a few annotations to the <classname>Book</"
"classname> and <classname>Author</classname> class. The first annotation "
"<literal>@Indexed</literal> marks <classname>Book</classname> as indexable. "
"By design Hibernate Search needs to store an untokenized id in the index to "
"ensure index unicity for a given entity. <literal>@DocumentId</literal> "
"marks the property to use for this purpose and is in most cases the same as "
"the database primary key. In fact since the 3.1.0 release of Hibernate "
"Search <literal>@DocumentId</literal> is optional in the case where an "
"<classname>@Id</classname> annotation exists."
msgstr ""

#. Tag: para
#: getting-started.xml:206
#, no-c-format
msgid ""
"Next you have to mark the fields you want to make searchable. Let's start "
"with <literal>title</literal> and <literal>subtitle</literal> and annotate "
"both with <literal>@Field</literal>. The parameter <literal>index=Index."
"TOKENIZED</literal> will ensure that the text will be tokenized using the "
"default Lucene analyzer. Usually, tokenizing means chunking a sentence into "
"individual words and potentially excluding common words like <literal>'a'</"
"literal> or '<literal>the</literal>'. We will talk more about analyzers a "
"little later on. The second parameter we specify within <literal>@Field</"
"literal>,<literal> store=Store.NO</literal>, ensures that the actual data "
"will not be stored in the index. Whether this data is stored in the index or "
"not has nothing to do with the ability to search for it. From Lucene's "
"perspective it is not necessary to keep the data once the index is created. "
"The benefit of storing it is the ability to retrieve it via projections "
"(<xref linkend=\"projections\"/>)."
msgstr ""

#. Tag: para
#: getting-started.xml:222
#, no-c-format
msgid ""
"Without projections, Hibernate Search will per default execute a Lucene "
"query in order to find the database identifiers of the entities matching the "
"query critera and use these identifiers to retrieve managed objects from the "
"database. The decision for or against projection has to be made on a case to "
"case basis. The default behaviour - <literal>Store.NO</literal> - is "
"recommended since it returns managed objects whereas projections only return "
"object arrays."
msgstr ""

#. Tag: para
#: getting-started.xml:230
#, no-c-format
msgid ""
"After this short look under the hood let's go back to annotating the "
"<classname>Book</classname> class. Another annotation we have not yet "
"discussed is <literal>@DateBridge</literal>. This annotation is one of the "
"built-in field bridges in Hibernate Search. The Lucene index is purely "
"string based. For this reason Hibernate Search must convert the data types "
"of the indexed fields to strings and vice versa. A range of predefined "
"bridges are provided, including the <classname>DateBridge</classname> which "
"will convert a <classname>java.util.Date</classname> into a "
"<classname>String</classname> with the specified resolution. For more "
"details see <xref linkend=\"search-mapping-bridge\"/>."
msgstr ""

#. Tag: para
#: getting-started.xml:241
#, no-c-format
msgid ""
"This leaves us with <literal>@IndexedEmbedded. </literal>This annotation is "
"used to index associated entities (<literal>@ManyToMany</literal>, "
"<literal>@*ToOne</literal> and <literal>@Embedded</literal>) as part of the "
"owning entity. This is needed since a Lucene index document is a flat data "
"structure which does not know anything about object relations. To ensure "
"that the authors' name wil be searchable you have to make sure that the "
"names are indexed as part of the book itself. On top of "
"<literal>@IndexedEmbedded</literal> you will also have to mark all fields of "
"the associated entity you want to have included in the index with "
"<literal>@Indexed</literal>. For more details see <xref linkend=\"search-"
"mapping-associated\"/>."
msgstr ""

#. Tag: para
#: getting-started.xml:253
#, no-c-format
msgid ""
"These settings should be sufficient for now. For more details on entity "
"mapping refer to <xref linkend=\"search-mapping-entity\"/>."
msgstr ""

#. Tag: title
#: getting-started.xml:257
#, no-c-format
msgid "Example entities after adding Hibernate Search annotations"
msgstr ""

#. Tag: programlisting
#: getting-started.xml:260
#, no-c-format
msgid ""
"package example;\n"
"...\n"
"@Entity\n"
"<emphasis role=\"bold\">@Indexed</emphasis>\n"
"public class Book {\n"
"\n"
"  @Id\n"
"  @GeneratedValue\n"
"  <emphasis role=\"bold\">@DocumentId</emphasis>\n"
"  private Integer id;\n"
"  \n"
"  <emphasis role=\"bold\">@Field(index=Index.TOKENIZED, store=Store.NO)</"
"emphasis>\n"
"  private String title;\n"
"  \n"
"  <emphasis role=\"bold\">@Field(index=Index.TOKENIZED, store=Store.NO)</"
"emphasis>\n"
"  private String subtitle; \n"
"\n"
"  <emphasis role=\"bold\">@IndexedEmbedded</emphasis>\n"
"  @ManyToMany \n"
"  private Set&lt;Author&gt; authors = new HashSet&lt;Author&gt;();\n"
"\n"
"<emphasis role=\"bold\">  @Field(index = Index.UN_TOKENIZED, store = Store."
"YES)\n"
"  @DateBridge(resolution = Resolution.DAY)</emphasis>\n"
"  private Date publicationDate;\n"
"  \n"
"  public Book() {\n"
"  } \n"
"  \n"
"  // standard getters/setters follow here\n"
"  ... \n"
"}"
msgstr ""

#. Tag: programlisting
#: getting-started.xml:262
#, no-c-format
msgid ""
"package example;\n"
"...\n"
"@Entity\n"
"public class Author {\n"
"\n"
"  @Id\n"
"  @GeneratedValue\n"
"  private Integer id;\n"
"\n"
"  <emphasis role=\"bold\">@Field(index=Index.TOKENIZED, store=Store.NO)</"
"emphasis>\n"
"  private String name;\n"
"\n"
"  public Author() {\n"
"  } \n"
" \n"
"  // standard getters/setters follow here\n"
"  ...\n"
"}"
msgstr ""

#. Tag: title
#: getting-started.xml:267
#, no-c-format
msgid "Indexing"
msgstr ""

#. Tag: para
#: getting-started.xml:269
#, no-c-format
msgid ""
"Hibernate Search will transparently index every entity persisted, updated or "
"removed through Hibernate Core. However, you have to trigger an initial "
"indexing to populate the Lucene index with the data already present in your "
"database. Once you have added the above properties and annotations it is "
"time to trigger an initial batch index of your books. You can achieve this "
"by using one of the following code snippets (see also <xref linkend=\"search-"
"batchindex\"/>):"
msgstr ""

#. Tag: title
#: getting-started.xml:278
#, no-c-format
msgid "Using Hibernate Session to index data"
msgstr ""

#. Tag: programlisting
#: getting-started.xml:280
#, no-c-format
msgid ""
"FullTextSession fullTextSession = Search.getFullTextSession(session);\n"
"Transaction tx = fullTextSession.beginTransaction();\n"
"\n"
"List books = session.createQuery(\"from Book as book\").list();\n"
"for (Book book : books) {\n"
"    <emphasis role=\"bold\">fullTextSession.index(book);</emphasis>\n"
"}\n"
"\n"
"tx.commit(); //index is written at commit time"
msgstr ""

#. Tag: title
#: getting-started.xml:284
#, no-c-format
msgid "Using JPA to index data"
msgstr ""

#. Tag: programlisting
#: getting-started.xml:286
#, no-c-format
msgid ""
"EntityManager em = entityManagerFactory.createEntityManager();\n"
"FullTextEntityManager fullTextEntityManager = Search.getFullTextEntityManager"
"(em);\n"
"em.getTransaction().begin();\n"
"\n"
"List books = em.createQuery(\"select book from Book as book\").getResultList"
"();\n"
"for (Book book : books) {\n"
"    <emphasis role=\"bold\">fullTextEntityManager.index(book);</emphasis>\n"
"} \n"
"\n"
"em.getTransaction().commit();\n"
"em.close();"
msgstr ""

#. Tag: para
#: getting-started.xml:289
#, no-c-format
msgid ""
"After executing the above code, you should be able to see a Lucene index "
"under <literal>/var/lucene/indexes/example.Book</literal>. Go ahead an "
"inspect this index with <ulink url=\"http://www.getopt.org/luke/\">Luke</"
"ulink>. It will help you to understand how Hibernate Search works."
msgstr ""

#. Tag: title
#: getting-started.xml:297
#, no-c-format
msgid "Searching"
msgstr ""

#. Tag: para
#: getting-started.xml:299
#, no-c-format
msgid ""
"Now it is time to execute a first search. The general approach is to create "
"a native Lucene query and then wrap this query into a org.hibernate.Query in "
"order to get all the functionality one is used to from the Hibernate API. "
"The following code will prepare a query against the indexed fields, execute "
"it and return a list of <classname>Book</classname>s."
msgstr ""

#. Tag: title
#: getting-started.xml:307
#, no-c-format
msgid "Using Hibernate Session to create and execute a search"
msgstr ""

#. Tag: programlisting
#: getting-started.xml:309
#, no-c-format
msgid ""
"FullTextSession fullTextSession = Search.getFullTextSession(session);\n"
"Transaction tx = fullTextSession.beginTransaction();\n"
"\n"
"// create native Lucene query\n"
"String[] fields = new String[]{\"title\", \"subtitle\", \"authors.name\", "
"\"publicationDate\"};\n"
"MultiFieldQueryParser parser = new MultiFieldQueryParser(fields, new "
"StandardAnalyzer());\n"
"org.apache.lucene.search.Query query = parser.parse( \"Java rocks!\" );\n"
"\n"
"// wrap Lucene query in a org.hibernate.Query\n"
"org.hibernate.Query hibQuery = fullTextSession.createFullTextQuery(query, "
"Book.class);\n"
"\n"
"// execute search\n"
"List result = hibQuery.list();\n"
"  \n"
"tx.commit();\n"
"session.close();"
msgstr ""

#. Tag: title
#: getting-started.xml:313
#, no-c-format
msgid "Using JPA to create and execute a search"
msgstr ""

#. Tag: programlisting
#: getting-started.xml:315
#, no-c-format
msgid ""
"EntityManager em = entityManagerFactory.createEntityManager();\n"
"FullTextEntityManager fullTextEntityManager = \n"
"    org.hibernate.hibernate.search.jpa.Search.getFullTextEntityManager(em);\n"
"em.getTransaction().begin();\n"
"\n"
"// create native Lucene query\n"
"String[] fields = new String[]{\"title\", \"subtitle\", \"authors.name\", "
"\"publicationDate\"};\n"
"MultiFieldQueryParser parser = new MultiFieldQueryParser(fields, new "
"StandardAnalyzer());\n"
"org.apache.lucene.search.Query query = parser.parse( \"Java rocks!\" );\n"
"\n"
"// wrap Lucene query in a javax.persistence.Query\n"
"javax.persistence.Query persistenceQuery = fullTextEntityManager."
"createFullTextQuery(query, Book.class);\n"
"\n"
"// execute search\n"
"List result = persistenceQuery.getResultList();\n"
"\n"
"em.getTransaction().commit();\n"
"em.close();"
msgstr ""

#. Tag: title
#: getting-started.xml:320
#, no-c-format
msgid "Analyzer"
msgstr ""

#. Tag: para
#: getting-started.xml:322
#, no-c-format
msgid ""
"Let's make things a little more interesting now. Assume that one of your "
"indexed book entities has the title \"Refactoring: Improving the Design of "
"Existing Code\" and you want to get hits for all of the following queries: "
"\"refactor\", \"refactors\", \"refactored\" and \"refactoring\". In Lucene "
"this can be achieved by choosing an analyzer class which applies word "
"stemming during the indexing <emphasis role=\"bold\">as well as</emphasis> "
"search process. Hibernate Search offers several ways to configure the "
"analyzer to use (see <xref linkend=\"analyzer\"/>):"
msgstr ""

#. Tag: para
#: getting-started.xml:333
#, no-c-format
msgid ""
"Setting the <literal>hibernate.search.analyzer</literal> property in the "
"configuration file. The specified class will then be the default analyzer."
msgstr ""

#. Tag: para
#: getting-started.xml:339
#, no-c-format
msgid ""
"Setting the <literal><literal>@Analyzer</literal></literal> annotation at "
"the entity level."
msgstr ""

#. Tag: para
#: getting-started.xml:344
#, no-c-format
msgid ""
"Setting the <literal>@<literal>Analyzer</literal></literal> annotation at "
"the field level."
msgstr ""

#. Tag: para
#: getting-started.xml:349
#, no-c-format
msgid ""
"When using the <literal>@Analyzer</literal> annotation one can either "
"specify the fully qualified classname of the analyzer to use or one can "
"refer to an analyzer definition defined by the <literal>@AnalyzerDef</"
"literal> annotation. In the latter case the Solr analyzer framework with its "
"factories approach is utilized. To find out more about the factory classes "
"available you can either browse the Solr JavaDoc or read the corresponding "
"section on the <ulink url=\"http://wiki.apache.org/solr/"
"AnalyzersTokenizersTokenFilters\">Solr Wiki.</ulink> Note that depending on "
"the chosen factory class additional libraries on top of the Solr "
"dependencies might be required. For example, the "
"<classname>PhoneticFilterFactory</classname> depends on <ulink url=\"http://"
"commons.apache.org/codec\">commons-codec</ulink>."
msgstr ""

#. Tag: para
#: getting-started.xml:362
#, no-c-format
msgid ""
"In the example below a <classname>StandardTokenizerFactory</classname> is "
"used followed by two filter factories, <classname>LowerCaseFilterFactory</"
"classname> and <classname>SnowballPorterFilterFactory</classname>. The "
"standard tokenizer splits words at punctuation characters and hyphens while "
"keeping email addresses and internet hostnames intact. It is a good general "
"purpose tokenizer. The lowercase filter lowercases the letters in each token "
"whereas the snowball filter finally applies language specific stemming."
msgstr ""

#. Tag: para
#: getting-started.xml:372
#, no-c-format
msgid ""
"Generally, when using the Solr framework you have to start with a tokenizer "
"followed by an arbitrary number of filters."
msgstr ""

#. Tag: title
#: getting-started.xml:376
#, no-c-format
msgid ""
"Using <classname>@AnalyzerDef</classname> and the Solr framework to define "
"and use an analyzer"
msgstr ""

#. Tag: programlisting
#: getting-started.xml:379
#, no-c-format
msgid ""
"package example;\n"
"...\n"
"@Entity\n"
"@Indexed\n"
"<emphasis role=\"bold\">@AnalyzerDef(name = \"customanalyzer\",\n"
"  tokenizer = @TokenizerDef(factory = StandardTokenizerFactory.class),\n"
"  filters = {\n"
"    @TokenFilterDef(factory = LowerCaseFilterFactory.class),\n"
"    @TokenFilterDef(factory = SnowballPorterFilterFactory.class, params = {\n"
"      @Parameter(name = \"language\", value = \"English\")\n"
"    })\n"
"  })</emphasis>\n"
"public class Book {\n"
"\n"
"  @Id\n"
"  @GeneratedValue\n"
"  @DocumentId\n"
"  private Integer id;\n"
"  \n"
"  @Field(index=Index.TOKENIZED, store=Store.NO)\n"
"  <emphasis role=\"bold\">@Analyzer(definition = \"customanalyzer\")</"
"emphasis>\n"
"  private String title;\n"
"  \n"
"  @Field(index=Index.TOKENIZED, store=Store.NO)\n"
"  <emphasis role=\"bold\">@Analyzer(definition = \"customanalyzer\")</"
"emphasis>\n"
"  private String subtitle; \n"
"\n"
"  @IndexedEmbedded\n"
"  @ManyToMany \n"
"  private Set&lt;Author&gt; authors = new HashSet&lt;Author&gt;();\n"
"\n"
"<emphasis role=\"bold\"> </emphasis> @Field(index = Index.UN_TOKENIZED, "
"store = Store.YES)\n"
"  @DateBridge(resolution = Resolution.DAY)\n"
"  private Date publicationDate;\n"
"  \n"
"  public Book() {\n"
"  } \n"
"  \n"
"  // standard getters/setters follow here\n"
"  ... \n"
"}"
msgstr ""

#. Tag: title
#: getting-started.xml:384
#, no-c-format
msgid "What's next"
msgstr ""

#. Tag: para
#: getting-started.xml:386
#, no-c-format
msgid ""
"The above paragraphs hopefully helped you getting an overview of Hibernate "
"Search. Using the maven archetype plugin and the following command you can "
"create an initial runnable maven project structure populated with the "
"example code of this tutorial."
msgstr ""

#. Tag: title
#: getting-started.xml:392
#, no-c-format
msgid "Using the Maven archetype to create tutorial sources"
msgstr ""

#. Tag: programlisting
#: getting-started.xml:394
#, no-c-format
msgid ""
"mvn archetype:create \\ \n"
"    -DarchetypeGroupId=org.hibernate \\\n"
"    -DarchetypeArtifactId=hibernate-search-quickstart \\ \n"
"    -DarchetypeVersion=3.1.0.GA \\\n"
"    -DgroupId=my.company -DartifactId=quickstart"
msgstr ""

#. Tag: para
#: getting-started.xml:397
#, no-c-format
msgid ""
"Using the maven project you can execute the examples, inspect the file "
"system based index and search and retrieve a list of managed objects. Just "
"run <emphasis>mvn package</emphasis> to compile the sources and run the unit "
"tests."
msgstr ""

#. Tag: para
#: getting-started.xml:402
#, no-c-format
msgid ""
"The next step after this tutorial is to get more familiar with the overall "
"architecture of Hibernate Search (<xref linkend=\"search-architecture\"/>) "
"and explore the basic features in more detail. Two topics which were only "
"briefly touched in this tutorial were analyzer configuration (<xref linkend="
"\"analyzer\"/>) and field bridges (<xref linkend=\"search-mapping-bridge\"/"
">), both important features required for more fine-grained indexing. More "
"advanced topics cover clustering (<xref linkend=\"jms-backend\"/>) and large "
"indexes handling (<xref linkend=\"search-configuration-directory-sharding\"/"
">)."
msgstr ""
